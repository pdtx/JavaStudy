package leetcode.others;

//颠倒给定的 32 位无符号整数的二进制位。
//
//
//        提示：
//        请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
//        在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。
//
//        进阶:
//        如果多次调用这个函数，你将如何优化你的算法？
//
//        示例 1：
//        输入: 00000010100101000001111010011100
//        输出: 00111001011110000010100101000000
//        解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
//        因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
//
//        示例 2：
//        输入：11111111111111111111111111111101
//        输出：10111111111111111111111111111111
//        解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
//        因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。




/**
 * description:
 *
 * @author fancying
 * create: 2021-03-28 20:20
 **/
public class Solution190 {


    public static void main(String[] args) {


        System.out.println(reverseBits(1));
    }
    // 将 nn 视作一个长为 3232 的二进制串，从低位往高位枚举 nn 的每一位，将其倒序添加到翻转结果 \textit{rev}rev 中。
    //
    //代码实现中，每枚举一位就将 nn 右移一位，这样当前 nn 的最低位就是我们要枚举的比特位。当 nn 为 00 时即可结束循环。
    //
    //需要注意的是，在某些语言（如 \texttt{Java}Java）中，没有无符号整数类型，因此对 nn 的右移操作应使用逻辑右移。
    //
    //作者：LeetCode-Solution
    //链接：https://leetcode-cn.com/problems/reverse-bits/solution/dian-dao-er-jin-zhi-wei-by-leetcode-solu-yhxz/
    public static int reverseBits(int n) {
        int res = 0;
        for(int i = 0; i < 32 && n != 0; i++) {
            res |= (n & 1) << (31 - i);
            n >>>=1;
        }
        return res ;
    }

}
